<?php
/**
 * CheckoutCompleteRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Housemates Connect API
 *
 * This is the API documentation for the Housemates Connect API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@housemates.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * CheckoutCompleteRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutCompleteRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'checkoutComplete_request';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'session_token' => 'string',
        'paying_in_instalments' => 'bool',
        'has_uk_based_guarantor' => 'bool',
        'is_using_housing_hand' => 'bool',
        'resident_details' => '\OpenAPI\Client\Model\ResidentDetails',
        'supporing_contact_details' => '\OpenAPI\Client\Model\SupportingContactDetails',
        'course_details' => '\OpenAPI\Client\Model\CourseDetails',
        'special_request' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'session_token' => null,
        'paying_in_instalments' => null,
        'has_uk_based_guarantor' => null,
        'is_using_housing_hand' => null,
        'resident_details' => null,
        'supporing_contact_details' => null,
        'course_details' => null,
        'special_request' => null
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        'session_token' => false,
        'paying_in_instalments' => false,
        'has_uk_based_guarantor' => false,
        'is_using_housing_hand' => false,
        'resident_details' => false,
        'supporing_contact_details' => false,
        'course_details' => false,
        'special_request' => true
    ];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_token' => 'session_token',
        'paying_in_instalments' => 'paying_in_instalments',
        'has_uk_based_guarantor' => 'has_uk_based_guarantor',
        'is_using_housing_hand' => 'is_using_housing_hand',
        'resident_details' => 'resident_details',
        'supporing_contact_details' => 'supporing_contact_details',
        'course_details' => 'course_details',
        'special_request' => 'special_request'
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_token' => 'setSessionToken',
        'paying_in_instalments' => 'setPayingInInstalments',
        'has_uk_based_guarantor' => 'setHasUkBasedGuarantor',
        'is_using_housing_hand' => 'setIsUsingHousingHand',
        'resident_details' => 'setResidentDetails',
        'supporing_contact_details' => 'setSupporingContactDetails',
        'course_details' => 'setCourseDetails',
        'special_request' => 'setSpecialRequest'
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_token' => 'getSessionToken',
        'paying_in_instalments' => 'getPayingInInstalments',
        'has_uk_based_guarantor' => 'getHasUkBasedGuarantor',
        'is_using_housing_hand' => 'getIsUsingHousingHand',
        'resident_details' => 'getResidentDetails',
        'supporing_contact_details' => 'getSupporingContactDetails',
        'course_details' => 'getCourseDetails',
        'special_request' => 'getSpecialRequest'
    ];
    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('session_token', $data ?? [], null);
        $this->setIfExists('paying_in_instalments', $data ?? [], null);
        $this->setIfExists('has_uk_based_guarantor', $data ?? [], null);
        $this->setIfExists('is_using_housing_hand', $data ?? [], null);
        $this->setIfExists('resident_details', $data ?? [], null);
        $this->setIfExists('supporing_contact_details', $data ?? [], null);
        $this->setIfExists('course_details', $data ?? [], null);
        $this->setIfExists('special_request', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param  string  $variableName
     * @param  array  $fields
     * @param  mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName,
                $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Checks if a property is nullable
     *
     * @param  string  $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param  string  $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['session_token'] === null) {
            $invalidProperties[] = "'session_token' can't be null";
        }
        if ($this->container['paying_in_instalments'] === null) {
            $invalidProperties[] = "'paying_in_instalments' can't be null";
        }
        if ($this->container['has_uk_based_guarantor'] === null) {
            $invalidProperties[] = "'has_uk_based_guarantor' can't be null";
        }
        if ($this->container['is_using_housing_hand'] === null) {
            $invalidProperties[] = "'is_using_housing_hand' can't be null";
        }
        if ($this->container['resident_details'] === null) {
            $invalidProperties[] = "'resident_details' can't be null";
        }
        if ($this->container['course_details'] === null) {
            $invalidProperties[] = "'course_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets session_token
     *
     * @return string
     */
    public function getSessionToken()
    {
        return $this->container['session_token'];
    }

    /**
     * Sets session_token
     *
     * @param  string  $session_token  session_token
     *
     * @return self
     */
    public function setSessionToken($session_token)
    {
        if (is_null($session_token)) {
            throw new \InvalidArgumentException('non-nullable session_token cannot be null');
        }
        $this->container['session_token'] = $session_token;

        return $this;
    }

    /**
     * Gets paying_in_instalments
     *
     * @return bool
     */
    public function getPayingInInstalments()
    {
        return $this->container['paying_in_instalments'];
    }

    /**
     * Sets paying_in_instalments
     *
     * @param  bool  $paying_in_instalments  paying_in_instalments
     *
     * @return self
     */
    public function setPayingInInstalments($paying_in_instalments)
    {
        if (is_null($paying_in_instalments)) {
            throw new \InvalidArgumentException('non-nullable paying_in_instalments cannot be null');
        }
        $this->container['paying_in_instalments'] = $paying_in_instalments;

        return $this;
    }

    /**
     * Gets has_uk_based_guarantor
     *
     * @return bool
     */
    public function getHasUkBasedGuarantor()
    {
        return $this->container['has_uk_based_guarantor'];
    }

    /**
     * Sets has_uk_based_guarantor
     *
     * @param  bool  $has_uk_based_guarantor  has_uk_based_guarantor
     *
     * @return self
     */
    public function setHasUkBasedGuarantor($has_uk_based_guarantor)
    {
        if (is_null($has_uk_based_guarantor)) {
            throw new \InvalidArgumentException('non-nullable has_uk_based_guarantor cannot be null');
        }
        $this->container['has_uk_based_guarantor'] = $has_uk_based_guarantor;

        return $this;
    }

    /**
     * Gets is_using_housing_hand
     *
     * @return bool
     */
    public function getIsUsingHousingHand()
    {
        return $this->container['is_using_housing_hand'];
    }

    /**
     * Sets is_using_housing_hand
     *
     * @param  bool  $is_using_housing_hand  is_using_housing_hand
     *
     * @return self
     */
    public function setIsUsingHousingHand($is_using_housing_hand)
    {
        if (is_null($is_using_housing_hand)) {
            throw new \InvalidArgumentException('non-nullable is_using_housing_hand cannot be null');
        }
        $this->container['is_using_housing_hand'] = $is_using_housing_hand;

        return $this;
    }

    /**
     * Gets resident_details
     *
     * @return \OpenAPI\Client\Model\ResidentDetails
     */
    public function getResidentDetails()
    {
        return $this->container['resident_details'];
    }

    /**
     * Sets resident_details
     *
     * @param  \OpenAPI\Client\Model\ResidentDetails  $resident_details  resident_details
     *
     * @return self
     */
    public function setResidentDetails($resident_details)
    {
        if (is_null($resident_details)) {
            throw new \InvalidArgumentException('non-nullable resident_details cannot be null');
        }
        $this->container['resident_details'] = $resident_details;

        return $this;
    }

    /**
     * Gets supporing_contact_details
     *
     * @return \OpenAPI\Client\Model\SupportingContactDetails|null
     */
    public function getSupporingContactDetails()
    {
        return $this->container['supporing_contact_details'];
    }

    /**
     * Sets supporing_contact_details
     *
     * @param  \OpenAPI\Client\Model\SupportingContactDetails|null  $supporing_contact_details  supporing_contact_details
     *
     * @return self
     */
    public function setSupporingContactDetails($supporing_contact_details)
    {
        if (is_null($supporing_contact_details)) {
            throw new \InvalidArgumentException('non-nullable supporing_contact_details cannot be null');
        }
        $this->container['supporing_contact_details'] = $supporing_contact_details;

        return $this;
    }

    /**
     * Gets course_details
     *
     * @return \OpenAPI\Client\Model\CourseDetails
     */
    public function getCourseDetails()
    {
        return $this->container['course_details'];
    }

    /**
     * Sets course_details
     *
     * @param  \OpenAPI\Client\Model\CourseDetails  $course_details  course_details
     *
     * @return self
     */
    public function setCourseDetails($course_details)
    {
        if (is_null($course_details)) {
            throw new \InvalidArgumentException('non-nullable course_details cannot be null');
        }
        $this->container['course_details'] = $course_details;

        return $this;
    }

    /**
     * Gets special_request
     *
     * @return string|null
     */
    public function getSpecialRequest()
    {
        return $this->container['special_request'];
    }

    /**
     * Sets special_request
     *
     * @param  string|null  $special_request  special_request
     *
     * @return self
     */
    public function setSpecialRequest($special_request)
    {
        if (is_null($special_request)) {
            array_push($this->openAPINullablesSetToNull, 'special_request');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_request', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['special_request'] = $special_request;

        return $this;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param  boolean[]  $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer  $offset  Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int|null  $offset  Offset
     * @param  mixed  $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


